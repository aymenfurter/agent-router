name: Infrastructure Validation

on:
  push:
    paths:
      - 'infra/**'
      - 'azure.yaml'
      - 'validate-deployment.sh'
      - '.github/workflows/infra-validation.yml'
  pull_request:
    paths:
      - 'infra/**'
      - 'azure.yaml'
      - 'validate-deployment.sh'
      - '.github/workflows/infra-validation.yml'
  workflow_dispatch:

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

jobs:
  validate-bicep:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-azd@v1.0.0

      - name: Install Bicep CLI
        run: |
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          bicep --version

      - name: Validate Bicep syntax
        run: |
          echo "🔧 Validating Bicep template syntax..."
          bicep build infra/main.bicep --outfile /tmp/main.json
          echo "✅ Bicep template syntax is valid"

      - name: Lint Bicep templates
        run: |
          echo "🧹 Running Bicep linter..."
          bicep lint infra/main.bicep
          echo "✅ Bicep linting passed"

      - name: Validate parameters file
        run: |
          echo "📝 Validating parameters file..."
          if [ ! -f infra/main.parameters.json ]; then
            echo "❌ Parameters file not found"
            exit 1
          fi
          
          # Check if it's valid JSON
          if jq empty infra/main.parameters.json; then
            echo "✅ Parameters file is valid JSON"
          else
            echo "❌ Parameters file is not valid JSON"
            exit 1
          fi

      - name: Check required parameters
        run: |
          echo "🔍 Checking required parameters..."
          # Extract required parameters from Bicep file
          REQUIRED_PARAMS=$(grep -E "^param.*string$" infra/main.bicep | grep -v "= ''" | awk '{print $2}')
          
          for param in $REQUIRED_PARAMS; do
            if jq -e ".parameters.$param" infra/main.parameters.json > /dev/null; then
              echo "✅ Required parameter '$param' found"
            else
              echo "⚠️  Required parameter '$param' not found in parameters file (may be provided at deployment time)"
            fi
          done

      - name: Validate azure.yaml configuration
        run: |
          echo "⚙️ Validating azure.yaml configuration..."
          if [ ! -f azure.yaml ]; then
            echo "❌ azure.yaml not found"
            exit 1
          fi
          
          # Check if it's valid YAML
          if python3 -c "import yaml; yaml.safe_load(open('azure.yaml'))"; then
            echo "✅ azure.yaml is valid YAML"
          else
            echo "❌ azure.yaml is not valid YAML"
            exit 1
          fi
          
          # Check for required azd fields
          if grep -q "name:" azure.yaml && grep -q "infra:" azure.yaml; then
            echo "✅ azure.yaml has required azd fields"
          else
            echo "❌ azure.yaml missing required azd fields (name, infra)"
            exit 1
          fi

      - name: Test validation script
        run: |
          echo "🧪 Testing validation script..."
          chmod +x validate-deployment.sh
          
          # Test script with dry-run mode (without Azure login)
          export AZURE_ENV_NAME="test-env"
          export AZURE_LOCATION="eastus" 
          export DRY_RUN="true"
          
          # Mock Azure CLI for testing
          mkdir -p /tmp/mock-bin
          cat > /tmp/mock-bin/az << 'EOF'
          #!/bin/bash
          case "$1" in
            "version")
              echo '{"azure-cli": "2.50.0"}'
              ;;
            "account")
              case "$2" in
                "show")
                  echo '{"id": "test-subscription", "user": {"name": "test@example.com"}}'
                  ;;
              esac
              ;;
            "ad")
              echo '{"id": "test-principal-id"}'
              ;;
            "bicep")
              case "$2" in
                "build")
                  bicep build "$4" --stdout > /dev/null
                  ;;
              esac
              ;;
            "group")
              case "$2" in
                "show")
                  exit 0
                  ;;
              esac
              ;;
            "deployment")
              case "$2" in
                "group")
                  case "$3" in
                    "what-if")
                      echo "✅ Mock what-if validation passed"
                      exit 0
                      ;;
                  esac
                  ;;
              esac
              ;;
          esac
          EOF
          
          chmod +x /tmp/mock-bin/az
          export PATH="/tmp/mock-bin:$PATH"
          
          # Validate script can run without errors
          if bash -n validate-deployment.sh; then
            echo "✅ Validation script syntax is correct"
          else
            echo "❌ Validation script has syntax errors"
            exit 1
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-bicep
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: bicep
          output_format: cli
          output_file_path: console
          quiet: true
          soft_fail: true

      - name: Check for security best practices
        run: |
          echo "🔐 Checking security best practices..."
          
          # Check for HTTPS enforcement
          if grep -q "httpsOnly.*true" infra/main.bicep; then
            echo "✅ HTTPS enforcement enabled"
          else
            echo "⚠️  HTTPS enforcement not found"
          fi
          
          # Check for managed identity usage
          if grep -q "Microsoft.ManagedIdentity" infra/main.bicep; then
            echo "✅ Managed Identity configured"
          else
            echo "⚠️  Managed Identity not found"
          fi
          
          # Check for Key Vault integration
          if grep -q "Microsoft.KeyVault" infra/main.bicep; then
            echo "✅ Key Vault integration found"
          else
            echo "⚠️  Key Vault integration not found"
          fi
          
          # Check for monitoring setup
          if grep -q "Microsoft.Insights" infra/main.bicep; then
            echo "✅ Application Insights configured"
          else
            echo "⚠️  Application Insights not found"
          fi

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [validate-bicep, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-azd@v1.0.0

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        continue-on-error: true

      - name: Run deployment validation
        if: env.AZURE_CLIENT_ID != ''
        run: |
          echo "🚀 Running full deployment validation..."
          export AZURE_ENV_NAME="agent-router-ci-${{ github.run_number }}"
          export AZURE_LOCATION="eastus"
          
          # Run the validation script
          chmod +x validate-deployment.sh
          ./validate-deployment.sh
          
          echo "✅ Deployment validation completed"

      - name: Clean up test resources
        if: env.AZURE_CLIENT_ID != '' && always()
        run: |
          # Clean up any test resources created during validation
          RESOURCE_GROUP_NAME="agent-router-ci-${{ github.run_number }}"
          if az group show --name "$RESOURCE_GROUP_NAME" &> /dev/null; then
            echo "🧹 Cleaning up test resource group..."
            az group delete --name "$RESOURCE_GROUP_NAME" --yes --no-wait
            echo "✅ Cleanup initiated"
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-bicep, security-scan]
    if: always()
    
    steps:
      - name: Validation Results
        run: |
          echo "## 🏗️ Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-bicep.result }}" == "success" ]; then
            echo "✅ **Bicep Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Bicep Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 What was validated:" >> $GITHUB_STEP_SUMMARY
          echo "- Bicep template syntax and compilation" >> $GITHUB_STEP_SUMMARY
          echo "- Bicep linting rules" >> $GITHUB_STEP_SUMMARY
          echo "- Parameters file structure" >> $GITHUB_STEP_SUMMARY
          echo "- Azure.yaml configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Validation script functionality" >> $GITHUB_STEP_SUMMARY
          echo "- Security best practices" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "- Full deployment validation (what-if)" >> $GITHUB_STEP_SUMMARY
          fi